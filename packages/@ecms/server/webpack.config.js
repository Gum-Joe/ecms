/* eslint-disable @typescript-eslint/no-var-requires */
/**
 * Configure Webpack
 * 
 * Most of config taken from https://github.com/2Keys-tech/2Keys-UI (private repo owned by me), which was auto-generated by electron-forge itself
 */

const path = require("path");
const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");
const PnpWebpackPlugin = require("pnp-webpack-plugin");
const webpack = require("webpack");
const CompressionPlugin = require("compression-webpack-plugin");

module.exports = {
	mode: (process.env.NODE_ENV === "development" ? "development" : "production"),
	// Helped by https://webpack.js.org/guides/getting-started/
	entry: ["webpack-hot-middleware/client", "./frontend/index.tsx"],
	output: { // Copied from https://webpack.js.org/guides/getting-started/
		filename: "main.js",
		path: path.join(__dirname, "dist"),
		publicPath: "/",
	},
	module: {
		// If youi are having issues with these make sure to downgrade to the loader's version that supports webpack v4 and not v5
		rules: [

			{
				test: /\.tsx?$/,
				exclude: /(node_modules|\.webpack)/,
				use: {
					loader: "ts-loader",
					options: {
						transpileOnly: true
					}
				}
			},

			{
				test: /\.css$/,
				use: [{ loader: "style-loader" }, { loader: "css-loader" }],
			},

			// From https://webpack.js.org/loaders/sass-loader/
			{
				test: /\.s[ac]ss$/i,
				use: [
					// Creates `style` nodes from JS strings
					"style-loader",
					// Translates CSS into CommonJS
					"css-loader",
					{
						// Run postcss actions - for bootstrap
						loader: "postcss-loader"
					},
					// Compiles Sass to CSS
					"sass-loader",
				],
			},

			{
				test: /\.md$/,
				use: "raw-loader",
			},

			// From https://webpack.js.org/guides/asset-management
			{
				test: /\.(png|svg|jpg|jpeg|gif)$/i,
				use: "file-loader",
			},
			{
				test: /\.(woff|woff2|eot|ttf|otf)$/i,
				use: "file-loader",

			},

			
		]
	},

	plugins: [
		(process.env.NODE_ENV === "development" ? new webpack.HotModuleReplacementPlugin() : null),
		new ForkTsCheckerWebpackPlugin(),
		new CompressionPlugin(),
	],

	resolve: {
		extensions: [".js", ".ts", ".jsx", ".tsx", ".scss", ".css"],
		plugins: [
			PnpWebpackPlugin,
		]
	},

	resolveLoader: {
		plugins: [
			PnpWebpackPlugin.moduleLoader(module),
		],
	},
	
};